name: Deploy Backend & Frontend to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Generate configuration.py
        run: |
          mkdir -p Backend/project/llm_app
          echo "${{ secrets.CONFIGURATION }}" | sed 's/^/config = /' > Backend/project/llm_app/configuration.py

      - name: Ensure ECR repositories exist
        run: |
          for REPO in itopsbackend itopsfrontend; do
            aws ecr describe-repositories --repository-names $REPO || \
            aws ecr create-repository --repository-name $REPO
          done

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region us-west-1 | \
          docker login --username AWS --password-stdin 361568250748.dkr.ecr.us-west-1.amazonaws.com

      - name: Build & Push Backend Docker Image
        run: |
          IMAGE_URI=361568250748.dkr.ecr.us-west-1.amazonaws.com/itopsbackend:latest
          docker build -t backend -f Backend/Dockerfile Backend
          docker tag backend:latest $IMAGE_URI
          docker push $IMAGE_URI

      - name: Build & Push Frontend Docker Image
        run: |
          IMAGE_URI=361568250748.dkr.ecr.us-west-1.amazonaws.com/itopsfrontend:latest
          docker build -t frontend -f UI_Copy/NewKnowledgeAssist/Dockerfile UI_Copy/NewKnowledgeAssist
          docker tag frontend:latest $IMAGE_URI
          docker push $IMAGE_URI

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install docker.io -y
              sudo service docker start
              sudo usermod -a -G docker $USER
            fi

            # Remove old containers and images
            docker ps -a -q --filter "name=backend" | xargs -r docker rm -f
            docker ps -a -q --filter "name=frontend" | xargs -r docker rm -f
            docker images -f "dangling=true" -q | xargs -r docker rmi -f
            docker system prune -af

            # Run containers
            docker pull 361568250748.dkr.ecr.us-west-1.amazonaws.com/itopsbackend:latest
            docker run -d --name backend -p 8000:8000 \
              -e VAULT_TOKEN="${{ secrets.VAULT_TOKEN }}" \
              361568250748.dkr.ecr.us-west-1.amazonaws.com/itopsbackend:latest

            docker pull 361568250748.dkr.ecr.us-west-1.amazonaws.com/itopsfrontend:latest
            docker run -d --name frontend -p 80:80 \
              361568250748.dkr.ecr.us-west-1.amazonaws.com/itopsfrontend:latest
          EOF
